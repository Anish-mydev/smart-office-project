{
  "openapi": "3.0.0",
  "info": {
    "title": "Smart Office Backend API",
    "version": "1.0.0",
    "description": "API documentation for the Smart Office backend microservices."
  },
  "servers": [
    {
      "url": "http://SmartO-Smart-K4IDcAF4swkL-135473292.us-east-1.elb.amazonaws.com",
      "description": "Development server"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "summary": "Register a new user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegistration"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Login a user and get a JWT token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLogin"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "/auth/health": {
      "get": {
        "summary": "Health check for Auth Service",
        "responses": {
          "200": {
            "description": "Auth Service is healthy",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "OK"
                }
              }
            }
          }
        }
      }
    },
    "/rooms/health": {
      "get": {
        "summary": "Health check for Room Booking Service",
        "responses": {
          "200": {
            "description": "Room Booking Service is healthy",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "OK"
                }
              }
            }
          }
        }
      }
    },
    "/rooms/bookings": {
      "get": {
        "summary": "Get all room bookings",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of room bookings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Booking"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "summary": "Create a new room booking",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookingRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Booking created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Booking"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/rooms/bookings/{bookingId}": {
      "delete": {
        "summary": "Delete a room booking by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the booking to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Booking deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Booking not found"
          }
        }
      }
    },
    "/desks/health": {
      "get": {
        "summary": "Health check for Desk Booking Service",
        "responses": {
          "200": {
            "description": "Desk Booking Service is healthy",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "OK"
                }
              }
            }
          }
        }
      }
    },
    "/desks/bookings": {
      "get": {
        "summary": "Get all desk bookings",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of desk bookings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Booking"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "summary": "Create a new desk booking",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookingRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Booking created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Booking"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/desks/bookings/{bookingId}": {
      "delete": {
        "summary": "Delete a desk booking by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the booking to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Booking deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Booking not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserRegistration": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "password123"
          },
          "role": {
            "type": "string",
            "enum": ["user", "admin"],
            "example": "user"
          }
        },
        "required": ["email", "password", "role"]
      },
      "UserLogin": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "password123"
          }
        },
        "required": ["email", "password"]
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          }
        },
        "required": ["token"]
      },
      "BookingRequest": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "example": "some-user-id"
          },
          "resourceId": {
            "type": "string",
            "example": "room-101"
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "example": "2025-07-09T10:00:00Z"
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "example": "2025-07-09T11:00:00Z"
          }
        },
        "required": ["userId", "resourceId", "startTime", "endTime"]
      },
      "Booking": {
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "string",
            "format": "uuid",
            "example": "a1b2c3d4-e5f6-7890-1234-567890abcdef"
          },
          "userId": {
            "type": "string",
            "example": "some-user-id"
          },
          "resourceId": {
            "type": "string",
            "example": "room-101"
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "example": "2025-07-09T10:00:00Z"
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "example": "2025-07-09T11:00:00Z"
          }
        },
        "required": ["bookingId", "userId", "resourceId", "startTime", "endTime"]
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}